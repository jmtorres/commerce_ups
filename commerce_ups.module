<?php

/**
 * @file
 * Handles main functionality for Commerce UPS module.
 */

require 'commerce_ups.xml.inc';

function commerce_ups_menu() {
  $items = array();

  $items['admin/commerce/config/shipping/methods/ups/edit'] = array(
    'title' => 'Edit',
    'description' => 'Configure the UPS shipping method.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_ups_settings_form'),
    'access arguments' => array('administer shipping'),
    'file' => 'commerce_ups.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_ups_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['ups'] = array(
    'title' => t('UPS'),
    'description' => t('Quote rates from UPS'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_ups_commerce_shipping_service_info() {
  $shipping_services = array();

  $available_services = _commerce_ups_service_list();
  $selected_services = variable_get('commerce_ups_services', array());

  foreach ($selected_services as $id => $val) {
    if (!empty($val)) { // if you find a selected one...
      $service = $available_services[$id];
      $shipping_services[$id] = array(
        'title' => t($service['title']),
        'description' => t($service['description']),
        'display_title' => t($service['title']),
        'shipping_method' => 'ups',
        'price_component' => 'shipping',
        'callbacks' => array(
          'rate' => 'commerce_ups_service_rate_order',
        )
      );
    }
  }
  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function commerce_ups_service_rate_order($shipping_service, $order) {
  // First attempt to recover cached shipping rates for the current order.
  $rates = commerce_shipping_rates_cache_get('ups', $order, variable_get('commerce_ups_rates_timeout', 0));
  // If no rates were recovered from the cache or the cached rates are over one minute old...
  if (!$rates) {
    $rates = array();

    // Build the rate request for the current order. This returns XML.
    $rate_request_xml = commerce_ups_build_rate_request($order);

    // If we got a valid rate request object back...
    if ($rate_request_xml) {
      // Submit the API request to UPS.
      $response = commerce_ups_api_request($rate_request_xml, t('Requesting shipping rates for Order @order_number', array('@order_number' => $order->order_number)));

      if (!empty($response)) {
        // Parse the response to cache all requested rates for the current order.
        foreach ($response->RatedShipment as $rate) {
          // Extract the service name and price information from the rate object.
          $service_name = commerce_ups_commerce_shipping_service_name((string) $rate->Service->Code);
          $decimal = (string) $rate->TotalCharges->MonetaryValue;
          $currency_code = (string) $rate->TotalCharges->CurrencyCode;

          // Add an item to the rates array for the current service.
          $rates[$service_name] = array(
            'amount' => commerce_currency_decimal_to_amount($decimal, $currency_code),
            'currency_code' => $currency_code,
            'data' => array(),
          );
        }
        // Cache the calculated rates for subsequent requests.
        commerce_shipping_rates_cache_set('ups', $order, $rates);
      }
    }
  }

  // Return the rate for the requested service or FALSE if not found.
  return isset($rates[$shipping_service['name']]) ? $rates[$shipping_service['name']] : FALSE;
}

/**
 * hook_form_alter()
 */
function commerce_ups_form_alter(&$form, &$form_state, $form_id) {
  if ('commerce_checkout_form_shipping' == $form_id) {
    $image = drupal_get_path('module', 'commerce_ups') . '/images/ups-logo.png';
    if (file_exists($image) && variable_get('commerce_ups_show_logo', FALSE)) {
      $form['commerce_shipping']['#title'] = $form['commerce_shipping']['#title'] . theme('image', array('path' => $image));
    }
  }
}


/**
 * Convenience function to get UPS codes for their services.
 */
function _commerce_ups_service_list() {
  $services =  array(
    // Domestic services
    'UPS_03' => array('code' => '03', 'title' => t('UPS Ground'), 'description' => t('Ground Delivery')),
    'UPS_12' => array('code' => '12', 'title' => t('UPS 3 Day Select'), 'description' => t('3 Day Select')),
    'UPS_02' => array('code' => '02', 'title' => t('UPS 2nd Day Air'), 'description' => t('2nd Day Air')),
    'UPS_59' => array('code' => '59', 'title' => t('UPS 2nd Day Air A.M.'), 'description' => t('2nd Day Air A.M.')),
    'UPS_13' => array('code' => '13', 'title' => t('UPS Next Day Air Saver'), 'description' => t('Next Day Air Saver')),
    'UPS_01' => array('code' => '01', 'title' => t('UPS Next Day Air'), 'description' => t('Next Day Air')),
    'UPS_14' => array('code' => '14', 'title' => t('UPS Next Day Early A.M.'), 'description' => t('Next Day Early A.M.')),
    // International services
    'UPS_11' => array('code' => '11', 'title' => t('UPS Standard'), 'description' => t('International Standard')),
    'UPS_07' => array('code' => '07', 'title' => t('UPS Worldwide Express'), 'description' => t('Worldwide Express')),
    'UPS_08' => array('code' => '08', 'title' => t('UPS Worldwide Expedited'), 'description' => t('Worldwide Expedited')),
    'UPS_54' => array('code' => '54', 'title' => t('UPS Worldwide Express Plus'), 'description' => t('Worldwide Express Plus')),
    'UPS_65' => array('code' => '65', 'title' => t('UPS Worldwide Saver'), 'description' => t('Worldwide Saver'))
  );
  return $services;
}

/**
 * Convenience function to get UPS codes for their package types.
 */
function _commerce_ups_packaging_types() {
  return array(
    // Customer Supplied Page is first so it will be the default
    '02' => t('Customer Supplied Package'),
    '01' => t('UPS Letter'),
    '03' => t('Tube'),
    '04' => t('PAK'),
    '21' => t('UPS Express Box'),
    '24' => t('UPS 25KG Box'),
    '25' => t('UPS 10KG Box'),
    '30' => t('Pallet'),
    '2a' => t('Small Express Box'),
    '2b' => t('Medium Express Box'),
    '2c' => t('Large Express Box'),
  );
}

function _commerce_ups_pickup_types() {
  return array(
    '06' => t('One Time Pickup'),
    '01' => t('Daily Pickup'),
    '03' => t('Customer Counter'),
    '07' => t('On Call Air'),
    '19' => t('Letter Center'),
    '20' => t('Air Service Center'),
  );
}


function commerce_ups_commerce_shipping_service_name($service_code) {
  //$service_names = _commerce_ups_service_list();
  return 'UPS_' . $service_code;
}

function commerce_ups_commerce_shipping_service($service){
  $services = _commerce_ups_service_list();
  return $services[$service];
}

/**
 * Encrypt a specified value.
 */
function commerce_ups_encrypt($value) {
  return aes_encrypt($value);
}

/**
 * Decrypt all api variables in one function call. 
 */
function commerce_ups_decrypt_vars($include_password) {
  $user_vars = array();
  $encrypted = variable_get('commerce_ups_encrypt', FALSE) && function_exists('aes_decrypt');
  $user_vars['ups_accountid'] = variable_get('commerce_ups_account_id', '');
  $user_vars['ups_userid'] = variable_get('commerce_ups_user_id', '');
  $user_vars['ups_accesskey'] = variable_get('commerce_ups_access_key', '');
  if ($include_password) {
    $user_vars['ups_password'] = variable_get('commerce_ups_password', '');
  }
  if ($encrypted) {
    $user_vars['ups_accountid'] = aes_decrypt($user_vars['ups_accountid']);
    $user_vars['ups_userid'] = aes_decrypt($user_vars['ups_userid']);
    $user_vars['ups_accesskey'] = aes_decrypt($user_vars['ups_accesskey']);
    if ($include_password) {
      $user_vars['ups_password'] = aes_decrypt($user_vars['ups_password']);
    }
  }
  return $user_vars;
}

/**
 * Check whether encryption is available.
 */
function commerce_ups_encryption_available($options = array()) {
  $defaults = array(
    'check_config' => TRUE,
    'display_errors' => FALSE,
    'display_warnings' => FALSE,
    'display_all' => FALSE,
    'fail_threshold' => 'warnings',
  );
  $options = array_merge($defaults, $options);
  extract($options);
  $errors = array();
  $warnings = array();

  if (!module_exists('aes')) {
    $errors[] = 'AES Encryption module is not installed.';
  }
  elseif ($check_config) {
    if (!variable_get('aes_key_path', FALSE) || variable_get('aes_key_storage_method', FALSE) != 'File') {
      $warnings[] = 'AES Encryption is installed but not configured securely. Please go ' . l('configure AES Encryption to use file storage', 'admin/settings/aes') . ' to enable encryption for UPS credentials.';
    }
  }

  if ($display_errors || $display_all) {
    foreach ($errors as $msg) {
      drupal_set_message(filter_xss(t($msg)), 'error', FALSE);
    }
  }

  if ($display_warnings || $display_all) {
    foreach ($warnings as $msg) {
      drupal_set_message(filter_xss(t($msg)), 'warning', FALSE);
    }
  }

  switch ($fail_threshold) {
    case 'errors':
      if (empty($errors)) {
        return TRUE;
      }
  case 'warnings':
    if (empty($errors) && empty($warnings)) {
      return TRUE;
    }
  }
}
